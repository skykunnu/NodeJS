# MongoDb is a non relational or NoSQL database that stores data in a flexible, JSON-like format called BSON (Binary JSON).

# Why MongoDb uses BSON over JSON
-> Faster Read & Write means Binary data can be processed more quickly than JSON.
-> It supports additional data types like Dates, 64-bit integer, binary data (images & files).
-> Efficient storage and indexing.


# Few Key points to remember when dealing with mongoDb

>  MongoDB is a non-Relational database or NoSQL database. the main difference when compared to a SQL database is you're not able to use joins to connect your database tables instead However we can use references to link between our various documents in mongodb. 

> Instead of using table in sql, we use documents in mongoDb.These documents are structured into BSON similar to JSON only. 

>  The main advantages of using MongoDB over Traditional SQL are

1. Easy Schema Iteration
2. Scalability and performance
3. Object Oriented. 

> Agile development - Accomodates large volumes of rapidly changing structured, semi-structured and unstructured data.

# Document vs Collection

> Document is a record in a MongoDb collection and the basic unit of data in MongoDB. documents look like JSON but exist as BSON. 
ex- 
{
    "_id":ObjectId("55923849e9493"),
    "title":"Article two",
    "categories": "Education",
}

> Collection is a grouping of all documents. typically all documents in a collection have similar or a related purpose.

ex- 

// doc1
{
    "_id":ObjectId("55923849e94933434"),
    "title":"Article one",
    "categories": "Travel",
}

// doc2
{
    "_id":ObjectId("55923849e94932324"),
    "title":"Article two",
    "categories": "Health Care",
}



// Following are the commands in MongoDB. 

cls - to clear the screen

show dbs - shows all databases (Dbs with no collections are not shown)

use {dbname} - to create new database

db - shows the current database

db.createCollection('collectionName') - Creates collection

show collections - Shows the collections in the current database

db.collectionName.drop() - To drop(delete) the collection

db.dropDatabase() - To drop(delete) the database.



Insert One Row: (Deprecated)
db.dbname.insert({
    'name': 'Rohit',
    'lang': 'JavaScript',
    'phone': 1234567890 
})


db.collectionName.insertOne({}) - inserts a column

db.collectionName.insertOne({
    'name': 'Rohit',
    'lang': 'JavaScript',
    'phone': 1234567890 
})

db.collectionName.insertMany([
    { name: "Ram", phone: 12345 },
    { name: "Shyam", phone: 54321 },
    { name: "Seeta" , phone: 12123 }
])

db.collectionName.find() - The find() method with no parameters returns all of the documents that we have added to our collection.

db.collectionName.find().pretty()- returns all the documents in the form of an object having properties in key-value pair form. 


# find() with arguments.

db.collectionName.findOne({name: 'Rohit'}) - Find the first row matching the object.


db.collectionName.find({name:'Seeta'})

 
db.collectionName.find( { _id: 5 } )


db.collectionName.find( { "name.last": "Hopper" } )


db.collectionName.find({name:'Seeta'}).limit(5)


db.collectionName.find({name: 'Seeta'}).count()


db.collectionName.find( { qty: { $gt: 4 } } )


db.collectionName.find( { birth: { $gt: new Date('1950-01-01') } } )


db.collectionName.find( { birth: { $gt: new Date('1940-01-01'), $lt: new Date('1960-01-01') } } ) //1960-01-01 (exclusive)


db.collectionName.find(
   { name: { $in: [ 'Mohan', 'Sohan' ] } }
)


db.collectionName.find(
   { "name.last": { $regex: /^N/ } }
) 
//name.last field starts with the letter N (or is "LIKE N%")

# Update an exisiting data in the collection by using $set key:-

here cars is a name of a collection. 
ex- db.cars.insert({name:"Mercedes",make:"E-class",year:"2024"})

now lets say we have to change the name .

> db.cars.update({name:"Mercedes"},{$set:{name:"BMW"}})

so when you run the command again db.cars.find().pretty()

> You can see the name has changed from "Mercedes" to "BMW".

  {
    _id: ObjectId('67d871c9c231150e71cb0ce4'),
    name: 'BMW',
    make: 'E-class',
    year: '2024'
  }

# Update an exisiting data by adding a new property in the collection using $upsert key:-

> db.cars.update({name:"Mercedes"},{$set:{transmission:"automatic"}},{$upsert:true})

After running above query the result would look like 

{
    _id: ObjectId('67d871c9c231150e71cb0ce4'),
    name: 'BMW',
    make: 'E-class',
    year: '2024',
    transmission: 'automatic'
}




